@page "/"
@using NestedRPObjValidationSample.Models
@using System.Diagnostics
@using Reactive.Bindings

<PageTitle>Home</PageTitle>

<EditForm EditContext="_editContext" OnValidSubmit="OnValid" OnInvalidSubmit="OnInvalid">
    <h2>Error</h2>

    <ValidationSummary />

    <h2>Form</h2>
    <button @onclick="AddEntity" @onclick:preventDefault>Add</button>
    @foreach (var someValue in _model.SomeValues)
    {
        <div>
            <label>
                A
                <InputText @bind-Value="someValue.A.Value" />
                <ValidationMessage For="@(() => someValue.A.Value)" />
            </label>
            <label>
                B
                <InputText @bind-Value="someValue.B.Value" />
                <ValidationMessage For="@(() => someValue.B.Value)" />
            </label>
        </div>
    }

    <input type="submit" />
</EditForm>

@if (!string.IsNullOrWhiteSpace(_message))
{
    <p>@_message</p>
}

@code {
    private SomeModel _model = new SomeModel
        {
            SomeValues =
            {
                new SomeEntity(),
                new SomeEntity(),
                new SomeEntity(),
            }
        };

    private EditContext? _editContext;
    private ValidationMessageStore? _validationMessageStore;
    private string _message = "";

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_model);
        _validationMessageStore = new ValidationMessageStore(_editContext);

        _editContext.OnValidationRequested += ValidationRequested;
    }

    private void AddEntity(MouseEventArgs args)
    {
        _model.SomeValues.Add(new SomeEntity());
    }

    private void ValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        Verify.ThrowIfNull(_editContext);
        Verify.ThrowIfNull(_validationMessageStore);

        _validationMessageStore.Clear();

        foreach (var someValue in _model.SomeValues)
        {
            someValue.Validate();

            AddErrorIfHasError(someValue.A);
            AddErrorIfHasError(someValue.B);
        }

        _editContext.NotifyValidationStateChanged();
        StateHasChanged();
    }

    private void AddErrorIfHasError<T>(ValidatableReactiveProperty<T> rp)
    {
        Verify.ThrowIfNull(_validationMessageStore);
        if (rp.HasErrors)
        {
            _validationMessageStore.Add(new FieldIdentifier(rp, nameof(rp.Value)), rp.ErrorMessage);
        }
    }

    private void OnValid(EditContext editContext)
    {
        _message = "Valid!";
    }

    private void OnInvalid(EditContext editContext)
    {
        _message = "Invalid!";
    }
}
